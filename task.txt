We ask you to develop a sample REST API using Node.js. There is an MS SQL database with just one table: select top(2) * from dogs limit 2;

name	color	tail_length	weight
Neo	red & amber	22	32
Jessy	black & white	7	14
(2 rows)
You need to develop the following API on top of it:

1. Your application should have an action called "Ping". It should work in the following way:

curl -X GET http://localhost/ping should return the following message: "Dogshouseservice.Version1.0.1"

2. Your application should have an action that allows querying dogs. It should work in the following way:

curl -X GET http://localhost/dogs should return the following:

[
{"name": "Neo", "color": "red&amber", "tail_length": 22, "weight": 32},
{"name": "Jessy", "color": "black&white", "tail_length": 7, "weight": 14}
]

API should support sorting by attribute, for example, curl -X GET http://localhost/dogs?attribute=weight&order=desc

API should support pagination, for example, curl -X GET http://localhost/dogs?pageNumber=3&limit=pageSize=10

Both sorting and pagination should work together.

3. Your application should have an action that allows creating dogs. It should work in the following way:

curl -X POST http://localhost/dog

-d "{"name": "Doggy","color": "red","tail_length": 173,"weight": 33}"

As a result, a new dog should be created.

Considerations for Error Handling and Data Validation:

Handling Duplicate Dog Names: Consider a scenario where a dog with the same name already exists in the database. Your API should be able to handle this situation appropriately.
Validating Tail Length: Ensure that the tail length value is valid. It should be a number and cannot be negative. Your API should validate this data and handle any invalid input.
Managing Invalid Request Data: Your API should be robust enough to handle situations where invalid data is passed in the request body. Think about how you can validate the data and respond to such situations.
Other Error Handling: Consider other potential issues that could affect the proper functioning of your API. This could include database connection errors, request timeouts, etc. Your API should be designed to handle these situations gracefully.
Here are a few additional requirements for the task:

Demonstrate your proficiency with Sequelize: We would like to see your knowledge and skills in using Sequelize. Please use this in your application.
Include a database initialization script: Please provide a script that initializes the database with the data provided in this task. This script should create the necessary tables and populate them with the given data.
Utilize async-await: Wherever possible, please use the async-await syntax in your code. This will help ensure that your application handles asynchronous operations effectively.
Showcase your understanding of software development patterns: We are interested in seeing your knowledge of various software development patterns. Please incorporate these into your application where appropriate. This could include patterns related to structuring your code, handling errors, managing data flow, etc.